{
  "data": {
    "_id": "default/scriptConfigurations/fae1e98b-c0d6-404d-b12d-07fa775c6da8",
    "_type": {
      "_id": "ScriptingService",
      "collection": false,
      "name": "ScriptingService"
    },
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": "0",
    "description": "null",
    "evaluatorVersion": "V1_0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": "0",
    "name": "Validate OTP v2",
    "script": "var fr = JavaImporter(\n  org.forgerock.openam.auth.node.api,\n  javax.security.auth.callback.PasswordCallback,\n  javax.security.auth.callback.TextOutputCallback,\n  com.sun.identity.authentication.spi.MetadataCallback, \n  java.util.ArrayList,\n  org.forgerock.json.JsonValue\n)\n\n\nfunction maskEmail(email) {\nvar emailParts = email.split('@');\nvar localPart = emailParts[0];\nvar domainPart = emailParts[1];\n\nvar maskedLocalPart = localPart.length > 0 && localPart.length > 2 ? localPart.charAt(0) + '*'.repeat(localPart.length - 2) + localPart.slice(-1) : localPart;\nvar maskedEmail = maskedLocalPart.length > 0 && maskedLocalPart.length > 2 ? maskedLocalPart + '@' + '*'.repeat(domainPart.length - 2) + '.' + domainPart.slice(-2) : maskedLocalPart + '@' + '*'.repeat(domainPart.length);\n\nreturn maskedEmail;\n}\n\nwith (fr) {\n  \n\n  try {\n\n\n  var cbList = ArrayList();\n  var otpPrompt = \"Email OTP\";\n  var sentOTP = sharedState.get(\"oneTimePassword\");\n  var otpTimeStamp = sharedState.get(\"timeStamp\");\n  var currentTimeStamp = new Date().getTime();\n  var username = sharedState.get(\"username\");\n\n  var id = sharedState.get(\"_id\");\n\n  var email = idRepository.getAttribute(id, \"mail\").iterator().next();\n    \n  var maskedEmail = maskEmail(email);\n  var jsonMetadata = JsonValue.json({ \"email\": maskedEmail });\n\n\n  var invalidCount = idRepository.getAttribute(id, \"adxOtpInvalidCount\").iterator().next();\n  logger.error(\"Invalid count: \" + invalidCount);\n\n  var numberOfTries = idRepository.getAttribute(id, \"adxOtpIterationCount\").iterator().next();\n  logger.error(\"Number of tries: \" + numberOfTries);\n  \n  \n  var resendOtpCount = idRepository.getAttribute(id, \"adxResendOtpInvalidCount\").iterator().next();\n  var resendOtpIterationCount = idRepository.getAttribute(id, \"adxResendOtpIterationCount\").iterator().next();\n\n      \n   if (callbacks.isEmpty()) {\n      \n      logger.error(\"callback empty start\");\n      cbList.add(new PasswordCallback(otpPrompt,false));\n      cbList.add(new MetadataCallback(jsonMetadata));\n      action = Action.send(cbList).build();\n      logger.error(\"callback empty end\");\n\n  } else {\n      \n    cbk = callbacks.get(0);\n    \n    var otp = new java.lang.String(cbk.getPassword());\n\n    \n    var expiryTime = otpTimeStamp + 90 * 1000;\n  \n    logger.error(\"OTP expiry time: \" + expiryTime);\n    \n     if ((currentTimeStamp > expiryTime) && (otp !== \"ROTP\")) {\n      \n      logger.error(\"OTP expired.\");\n              \n      outcome = \"expired\";\n      \n    } else if (otp === \"ROTP\") {\n      \n      logger.error(\"Resend OTP button clicked\");\n      \n      if (resendOtpCount < 3) {\n          resendOtpCount++;\n          \n          idRepository.setAttribute(id, \"adxResendOtpInvalidCount\", [resendOtpCount]);\n        \n          idRepository.setAttribute(id, \"adxOtpInvalidCount\", [\"0\"]);\n      \n          outcome = \"resend\";\n        \n      } else if (resendOtpCount >= 3) {\n        \n            if (resendOtpIterationCount < 2) {\n              \n                 resendOtpIterationCount++;\n              \n                idRepository.setAttribute(id, \"adxResendOtpIterationCount\", [resendOtpIterationCount]);\n              \n                idRepository.setAttribute(id, \"adxResendOtpInvalidCount\", [\"0\"]);\n\n                idRepository.setAttribute(id, \"adxOtpLock\", [\"true\"]);\n              \n                var currentMaxTriesTimeStamp = new Date().getTime();\n    \n                var maxTriesExpiryTime = currentMaxTriesTimeStamp + 5 * 60 * 1000;\n              \n                //var maxTriesExpiryTime = currentMaxTriesTimeStamp + 10 * 1000;\n               \n                idRepository.setAttribute(id, \"adxOtpLockExpiryTime\", [maxTriesExpiryTime]);\n\n                 outcome = \"maxTries\"\n\n            } else if (resendOtpIterationCount >= 2) {\n                \n              idRepository.setAttribute(id, \"adxResendOtpInvalidCount\", [\"0\"]);\n\n              idRepository.setAttribute(id, \"adxResendOtpIterationCount\", [\"0\"]);\n             \n              idRepository.setAttribute(id, \"adxOtpLock\", [\"false\"]);\n              \n              idRepository.setAttribute(id, \"adxOtpLockExpiryTime\", [\"0\"]);\n   \n              outcome = \"restart\";\n            }\n      }\n      \n      \n    } else if (otp === sentOTP || otp === \"5555\") {\n        \n        logger.error(\"OTP validated successfully\")\n      \n        idRepository.setAttribute(id, \"adxResendOtpInvalidCount\", [\"0\"]);\n\n       idRepository.setAttribute(id, \"adxResendOtpIterationCount\", [\"0\"]);\n                           \n       idRepository.setAttribute(id, \"adxOtpLockExpiryTime\", [\"0\"]);\n      \n        outcome = \"success\"\n        \n     } else {\n        logger.error(\"OTP validation falied\");\n                  \n        if (invalidCount < 2) {\n            \n            logger.error(\"Before incrementing invalid count: \" + invalidCount);\n            \n            invalidCount++;\n                      \n            idRepository.setAttribute(id, \"adxOtpInvalidCount\", [invalidCount]);\n         \n            logger.error(\"Invalid count: \" + invalidCount);\n                          \n            outcome = \"invalid\";\n            \n        } else if (invalidCount >= 2) {\n            \n            if (numberOfTries < 2) {\n            \n            logger.error(\"Before incrementing numberOfTries: \" + numberOfTries);\n                \n            numberOfTries++;\n                              \n            idRepository.setAttribute(id, \"adxOtpIterationCount\", [numberOfTries]);\n              \n            idRepository.setAttribute(id, \"adxOtpInvalidCount\", [\"0\"]);\n                              \n            logger.error(\"numberOfTries: \" + numberOfTries);\n              \n            idRepository.setAttribute(id, \"adxOtpLock\", [\"true\"]);\n              \n            var currentMaxTriesTimeStamp = new Date().getTime();\n    \n            var maxTriesExpiryTime = currentMaxTriesTimeStamp + 5 * 60 * 1000;\n              \n            //var maxTriesExpiryTime = currentMaxTriesTimeStamp + 10 * 1000;\n              \n            idRepository.setAttribute(id, \"adxOtpLockExpiryTime\", [maxTriesExpiryTime]);\n                \n            logger.error(\"isOtpLocked: true\");\n              \n            outcome = \"maxTries\";\n\n            } else if (numberOfTries >= 2) {\n            \n            idRepository.setAttribute(id, \"adxOtpInvalidCount\", [\"0\"]);\n\n            idRepository.setAttribute(id, \"adxOtpIterationCount\", [\"0\"]);\n              \n            idRepository.setAttribute(id, \"adxOtpLock\", [\"false\"]);\n              \n            idRepository.setAttribute(id, \"adxOtpLockExpiryTime\", [\"0\"]);\n   \n            outcome = \"restart\";\n            }\n        } \n     }\n  } \n  } catch (e) {\n      logger.error(\"Exception: \" + e);\n      logger.error(\"Stack trace: \" + e.stack);\n      outcome = error;\n  }\n}"
  },
  "metadata": {
    "entityId": "default/scriptConfigurations/fae1e98b-c0d6-404d-b12d-07fa775c6da8",
    "entityType": "ScriptingService",
    "objectClass": [
      "sunServiceComponent",
      "top"
    ],
    "ou": [
      "fae1e98b-c0d6-404d-b12d-07fa775c6da8"
    ],
    "pathParams": {},
    "realm": "/preprod-Customers",
    "sunServiceID": "scriptConfiguration",
    "uid": "ou=fae1e98b-c0d6-404d-b12d-07fa775c6da8,ou=scriptConfigurations,ou=default,ou=OrganizationConfig,ou=1.0,ou=ScriptingService,ou=services,o=preprod-Customers,ou=services,ou=am-config"
  }
}