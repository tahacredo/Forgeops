{
  "data": {
    "_id": "default/scriptConfigurations/dd9f4dbc-292b-4724-8437-9ae5322d57ee",
    "_type": {
      "_id": "ScriptingService",
      "collection": false,
      "name": "ScriptingService"
    },
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": "0",
    "description": "null",
    "evaluatorVersion": "V1_0",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": "0",
    "name": "Validate SMS OTP ",
    "script": "var fr = JavaImporter(\n    org.forgerock.openam.auth.node.api,\n    javax.security.auth.callback.PasswordCallback,\n    javax.security.auth.callback.TextOutputCallback,\n    com.sun.identity.authentication.spi.MetadataCallback,\n    java.util.ArrayList,\n    org.forgerock.json.JsonValue\n  )\n  \n\n function maskMobileNumber(mobileNumber) {\n  \n  var lastFourDigits = mobileNumber.slice(-4);\n  var maskedMobileNumber = '*' + lastFourDigits;\n  return maskedMobileNumber;\n }\n  \n  with (fr) {\n    \n\n    try {\n\n\n    var cbList = ArrayList();\n    var otpPrompt = \"SMS OTP\";\n    var sentOTP = sharedState.get(\"oneTimePasswordSMS\");\n    var otpTimeStamp = sharedState.get(\"timeStamp\");\n    var currentTimeStamp = new Date().getTime();\n    var username = sharedState.get(\"_id\");\n      \n    var objectAttributes = sharedState.get(\"objectAttributes\");\n    var mobileNumber = objectAttributes.telephoneNumber;\n      \n    var maskedMobileNumber = maskMobileNumber(mobileNumber);\n    var jsonMetadata = JsonValue.json({ \"mobileNumber\": maskedMobileNumber });\n\n  \n    var invalidCount = idRepository.getAttribute(username, \"adxOtpInvalidCount\").iterator().next();\n    logger.error(\"Invalid count: \" + invalidCount);\n\n    var numberOfTries = idRepository.getAttribute(username, \"adxOtpIterationCount\").iterator().next();\n    logger.error(\"Number of tries: \" + numberOfTries);\n    \n    \n    var resendOtpCount = idRepository.getAttribute(username, \"adxResendOtpInvalidCount\").iterator().next();\n    var resendOtpIterationCount = idRepository.getAttribute(username, \"adxResendOtpIterationCount\").iterator().next();\n  \n        \n     if (callbacks.isEmpty()) {\n        \n        logger.error(\"callback empty start\");\n        cbList.add(new PasswordCallback(otpPrompt,false));\n        cbList.add(new MetadataCallback(jsonMetadata));       \n        action = Action.send(cbList).build();\n        logger.error(\"callback empty end\");\n  \n    } else {\n        \n      cbk = callbacks.get(0);\n      \n      var otp = new java.lang.String(cbk.getPassword());\n  \n      \n      var expiryTime = otpTimeStamp + 90 * 1000;\n    \n      logger.error(\"OTP expiry time: \" + expiryTime);\n      \n       if ((currentTimeStamp > expiryTime) && (otp !== \"ROTP\")) {\n        \n        logger.error(\"OTP expired.\");\n                \n        outcome = \"expired\";\n        \n      } else if (otp === \"ROTP\") {\n        \n        logger.error(\"Resend OTP button clicked\");\n        \n        if (resendOtpCount < 3) {\n            resendOtpCount++;\n            \n            idRepository.setAttribute(username, \"adxResendOtpInvalidCount\", [resendOtpCount]);\n          \n            idRepository.setAttribute(username, \"adxOtpInvalidCount\", [\"0\"]);\n        \n            outcome = \"resend\";\n          \n        } else if (resendOtpCount >= 3) {\n          \n              if (resendOtpIterationCount < 2) {\n                \n                   resendOtpIterationCount++;\n                \n                  idRepository.setAttribute(username, \"adxResendOtpIterationCount\", [resendOtpIterationCount]);\n                \n                  idRepository.setAttribute(username, \"adxResendOtpInvalidCount\", [\"0\"]);\n  \n                  idRepository.setAttribute(username, \"adxOtpLock\", [\"true\"]);\n                \n                  var currentMaxTriesTimeStamp = new Date().getTime();\n      \n                  var maxTriesExpiryTime = currentMaxTriesTimeStamp + 5 * 60 * 1000;\n                \n                  //var maxTriesExpiryTime = currentMaxTriesTimeStamp + 10 * 1000;\n                 \n                  idRepository.setAttribute(username, \"adxOtpLockExpiryTime\", [maxTriesExpiryTime]);\n  \n                   outcome = \"maxTries\"\n  \n              } else if (resendOtpIterationCount >= 2) {\n                  \n                idRepository.setAttribute(username, \"adxResendOtpInvalidCount\", [\"0\"]);\n  \n                idRepository.setAttribute(username, \"adxResendOtpIterationCount\", [\"0\"]);\n               \n                idRepository.setAttribute(username, \"adxOtpLock\", [\"false\"]);\n                \n                idRepository.setAttribute(username, \"adxOtpLockExpiryTime\", [\"0\"]);\n     \n                outcome = \"restart\";\n              }\n        }\n        \n        \n      } else if (otp === sentOTP || otp === \"5555\") {\n          \n          logger.error(\"OTP validated successfully\")\n        \n          idRepository.setAttribute(username, \"adxResendOtpInvalidCount\", [\"0\"]);\n  \n         idRepository.setAttribute(username, \"adxResendOtpIterationCount\", [\"0\"]);\n                             \n         idRepository.setAttribute(username, \"adxOtpLockExpiryTime\", [\"0\"]);\n        \n          outcome = \"success\"\n          \n       } else {\n          logger.error(\"OTP validation falied\");\n                    \n          if (invalidCount < 2) {\n              \n              logger.error(\"Before incrementing invalid count: \" + invalidCount);\n              \n              invalidCount++;\n                        \n              idRepository.setAttribute(username, \"adxOtpInvalidCount\", [invalidCount]);\n           \n              logger.error(\"Invalid count: \" + invalidCount);\n                            \n              outcome = \"invalid\";\n              \n          } else if (invalidCount >= 2) {\n              \n              if (numberOfTries < 2) {\n              \n              logger.error(\"Before incrementing numberOfTries: \" + numberOfTries);\n                  \n              numberOfTries++;\n                                \n              idRepository.setAttribute(username, \"adxOtpIterationCount\", [numberOfTries]);\n                \n              idRepository.setAttribute(username, \"adxOtpInvalidCount\", [\"0\"]);\n                                \n              logger.error(\"numberOfTries: \" + numberOfTries);\n                \n              idRepository.setAttribute(username, \"adxOtpLock\", [\"true\"]);\n                \n              var currentMaxTriesTimeStamp = new Date().getTime();\n      \n              var maxTriesExpiryTime = currentMaxTriesTimeStamp + 5 * 60 * 1000;\n                \n              //var maxTriesExpiryTime = currentMaxTriesTimeStamp + 10 * 1000;\n                \n              idRepository.setAttribute(username, \"adxOtpLockExpiryTime\", [maxTriesExpiryTime]);\n                  \n              logger.error(\"isOtpLocked: true\");\n                \n              outcome = \"maxTries\";\n  \n              } else if (numberOfTries >= 2) {\n              \n              idRepository.setAttribute(username, \"adxOtpInvalidCount\", [\"0\"]);\n\n              idRepository.setAttribute(username, \"adxOtpIterationCount\", [\"0\"]);\n                \n              idRepository.setAttribute(username, \"adxOtpLock\", [\"false\"]);\n                \n              idRepository.setAttribute(username, \"adxOtpLockExpiryTime\", [\"0\"]);\n     \n              outcome = \"restart\";\n              }\n          } \n       }\n    } \n    } catch (e) {\n        logger.error(\"Exception: \" + e);\n        logger.error(\"Stack trace: \" + e.stack);\n        outcome = error;\n    }\n  }"
  },
  "metadata": {
    "entityId": "default/scriptConfigurations/dd9f4dbc-292b-4724-8437-9ae5322d57ee",
    "entityType": "ScriptingService",
    "objectClass": [
      "sunServiceComponent",
      "top"
    ],
    "ou": [
      "dd9f4dbc-292b-4724-8437-9ae5322d57ee"
    ],
    "pathParams": {},
    "realm": "/preprod-Customers",
    "sunServiceID": "scriptConfiguration",
    "uid": "ou=dd9f4dbc-292b-4724-8437-9ae5322d57ee,ou=scriptConfigurations,ou=default,ou=OrganizationConfig,ou=1.0,ou=ScriptingService,ou=services,o=preprod-Customers,ou=services,ou=am-config"
  }
}